parameters:
  neos_foo:

services:

  # TODO: this should be configured "PER BOUNDED CONTEXT" (analogous to how Doctrine DBAL connections are handled)
  neos_eventsourcing_event_eventTypeResolver:
    class: Neos\EventSourcing\Event\Resolver\FullyQualifiedClassNameResolver

  neos_eventsourcing_eventStore_eventNormalizer:
    class: Neos\EventSourcing\EventStore\EventNormalizer
    arguments:
      $eventTypeResolver: "@neos_eventsourcing_event_eventTypeResolver"

  neos_eventsourcing_symfony_command_setupCommand:
    class: Neos\EventSourcing\Symfony\Command\SetupCommand
    tags: ["console.command"]
    arguments:
      # TODO
      $doctrineAppliedEventsStorageSetup: "@neos_eventsourcing_symfony_eventlistener_appliedeventsstorage_doctrineAppliedEventsStorageSetup"
      $container: "@Psr\\Container\\ContainerInterface"

  neos_eventsourcing_symfony_eventlistener_appliedeventsstorage_doctrineAppliedEventsStorageSetup:
    class: Neos\EventSourcing\Symfony\EventListener\AppliedEventsStorage\DoctrineAppliedEventsStorageSetup
    arguments:
      $connection: "@Doctrine\\DBAL\\Connection"


  neos_eventsourcing_symfony_command_internalFooCommand:
    class: Neos\EventSourcing\Symfony\Command\InternalCatchUpEventListenerCommand
    tags: [ "console.command" ]
    arguments:
      $container: "@Psr\\Container\\ContainerInterface"
      $connection: "@Doctrine\\DBAL\\Connection"

  Neos\EventSourcing\Symfony\Transport\ConsoleCommandTransport: ~
  Neos\EventSourcing\Symfony\Transport\AsyncTransportInterface: '@Neos\EventSourcing\Symfony\Transport\ConsoleCommandTransport'
